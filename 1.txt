import javax.imageio.ImageIO;
import javax.imageio.ImageReader;
import javax.imageio.ImageWriter;
import javax.imageio.stream.ImageInputStream;
import javax.imageio.stream.ImageOutputStream;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class CombineJpgToTiff {

    public static void main(String[] args) throws IOException {
        // Input JPG files
        File file1 = new File("a.jpg");
        File file2 = new File("b.jpg");

        // Output TIFF file
        File outputFile = new File("result.tiff");

        // Read JPG images
        List<BufferedImage> images = new ArrayList<>();
        images.add(ImageIO.read(file1));
        images.add(ImageIO.read(file2));

        // Convert to black and white and resize
        List<BufferedImage> processedImages = new ArrayList<>();
        for (BufferedImage image : images) {
            processedImages.add(processImage(image));
        }

        // Get TIFF writer
        Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName("tiff");
        if (!writers.hasNext()) {
            throw new IllegalStateException("No TIFF writer found");
        }
        ImageWriter writer = writers.next();

        // Create TIFF image output stream
        ImageOutputStream ios = ImageIO.createImageOutputStream(outputFile);
        writer.setOutput(ios);

        // Set TIFF compression
        ImageWriteParam params = writer.getDefaultWriteParam();
        params.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
        params.setCompressionType("LZW");

        // Write TIFF image
        try {
            writer.write(null, new javax.imageio.IIOImage(processedImages.get(0), null, null), params);
            for (int i = 1; i < processedImages.size(); i++) {
                writer.writeInsert(i, new javax.imageio.IIOImage(processedImages.get(i), null, null), params);
            }
        } finally {
            // Close streams and dispose resources
            ios.close();
            writer.dispose();
        }

        System.out.println("TIFF image created successfully!");
    }

    private static BufferedImage processImage(BufferedImage image) {
        // Convert to grayscale
        BufferedImage grayImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_BYTE_GRAY);
        Graphics g = grayImage.getGraphics();
        g.drawImage(image, 0, 0, null);
        g.dispose();

        // Resize (adjust newWidth and newHeight as needed)
        int newWidth = grayImage.getWidth() / 2; 
        int newHeight = grayImage.getHeight() / 2;
        BufferedImage resizedImage = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_BYTE_GRAY);
        resizedImage.getGraphics().drawImage(grayImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH), 0, 0, null);

        return resizedImage;
    }
}
